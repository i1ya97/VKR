// <auto-generated />
using System;
using API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250112155030_123")]
    partial class _123
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Entity.Analytic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Ordered_units")
                        .HasColumnType("integer");

                    b.Property<int>("Returns")
                        .HasColumnType("integer");

                    b.Property<long>("SkuId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SkuId");

                    b.ToTable("Analytics");
                });

            modelBuilder.Entity("API.Entity.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("Due_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("End_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Start_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("User_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UploadLogs");
                });

            modelBuilder.Entity("API.Entity.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency_code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Delivery_amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Is_discounted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Is_kgt")
                        .HasColumnType("boolean");

                    b.Property<double>("Marketing_price")
                        .HasColumnType("double precision");

                    b.Property<double>("Min_price")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Offer_id")
                        .HasColumnType("bigint");

                    b.Property<double>("Old_price")
                        .HasColumnType("double precision");

                    b.Property<double>("Percent")
                        .HasColumnType("double precision");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<double>("Return_amount")
                        .HasColumnType("double precision");

                    b.Property<string>("Sale_schema")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Type_id")
                        .HasColumnType("bigint");

                    b.Property<string>("User_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.Property<double>("Vat")
                        .HasColumnType("double precision");

                    b.Property<double>("Volume_weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("API.Entity.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Present")
                        .HasColumnType("integer");

                    b.Property<int>("Reserved")
                        .HasColumnType("integer");

                    b.Property<long>("SkuId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SkuId");

                    b.ToTable("Stoks");
                });

            modelBuilder.Entity("API.Entity.Analytic", b =>
                {
                    b.HasOne("API.Entity.Product", "Sku")
                        .WithMany()
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("API.Entity.Stock", b =>
                {
                    b.HasOne("API.Entity.Product", "Sku")
                        .WithMany()
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sku");
                });
#pragma warning restore 612, 618
        }
    }
}
